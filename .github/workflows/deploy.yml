name: Deploy to AWS EC2

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Set PYTHONPATH
      run: echo "PYTHONPATH=$(pwd)" >> $GITHUB_ENV

    - name: Test with pytest
      env:
        DB_HOST: 127.0.0.1
        DB_NAME: test_db
        DB_USER: test_user
        DB_PASSWORD: test_password
        SECRET_KEY: test_secret_key
      run: |
        pytest


  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Crear directorio de despliegue si no existe
          mkdir -p ~/wavestudio-deployment
          cd ~/wavestudio-deployment
          
          # Crear o actualizar docker-compose.yml
          cat > docker-compose.yml << 'EOL'
          version: '3.8'
          
          services:
            api:
              image: ${ECR_IMAGE}
              container_name: wavestudio_api
              ports:
                - "8000:8000"
              environment:
                - DB_HOST=${DB_HOST}
                - DB_NAME=${DB_NAME}
                - DB_USER=${DB_USER}
                - DB_PASSWORD=${DB_PASSWORD}
                - SECRET_KEY=${SECRET_KEY}
                - MASTER_USERNAME=${MASTER_USERNAME}
                - MASTER_EMAIL=${MASTER_EMAIL}
                - MASTER_PASSWORD=${MASTER_PASSWORD}
              restart: always
              volumes:
                - ./logs:/app/logs
          EOL
          
          # Crear o actualizar .env
          cat > .env << EOL
          ECR_IMAGE=${{ steps.build-image.outputs.image }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          MASTER_USERNAME=${{ secrets.MASTER_USERNAME }}
          MASTER_EMAIL=${{ secrets.MASTER_EMAIL }}
          MASTER_PASSWORD=${{ secrets.MASTER_PASSWORD }}
          EOL
          
          # Detener contenedores existentes
          docker-compose down
          
          # Iniciar los contenedores
          docker-compose pull
          docker-compose up -d
          
          # Verificar que los contenedores estÃ©n funcionando
          docker-compose ps
          
          echo "Despliegue completado"
